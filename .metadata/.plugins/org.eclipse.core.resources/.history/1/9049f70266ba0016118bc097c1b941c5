package twy.burton.core.library;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import twy.burton.core.Constants;
import twy.burton.core.library.legacy.LegacyLibrary;
import twy.burton.core.service.IdServicePair;
import twy.burton.core.service.Service;
import twy.burton.core.service.ServiceExtra;
import twy.burton.utilities.FileAccess;
import twy.burton.utilities.OutputConsole;

public abstract class PasswordLibrary {

	protected String libraryName;
	protected List<Service> services = new ArrayList<Service>();
	protected String libraryVersion = "Unknown";
	
	public PasswordLibrary(){
		
	}
	
	// Rewrite Library To Store
	public abstract boolean write();
	// Read Library From Store
	protected abstract boolean read();
	// Unlock The Library
	public abstract boolean unlock();
	// Lock The Library
	public void lock(){
		services = new ArrayList<Service>();
	}
	
	public abstract boolean validatePassword( String password );
	
	// Functions for reading and writing library data to the librariesfile
	public abstract byte[] getLibraryStoreString();
	public abstract void createLibraryFromStoreString( byte[] storeString );
	
	
	public abstract String getListIdentifier();
	
	public void setLibraryName( String libraryName ){
		this.libraryName = libraryName;
	}
	
	public String getLibraryName(){
		return libraryName;
	}
	
	
	// ============================================
	//		 Functions for accessing services
	// ============================================
	
	// Add a service to the service list
	public void addService( Service s0 ){
		services.add(s0);
	}
	
	// Return a list of services which have a name containing the name parameter
	public List<IdServicePair> getServiceByName( String name ){
		List<IdServicePair> matches = new ArrayList<IdServicePair>();
		for( int i = 0 ; i < services.size(); i++ ){
			if( services.get(i).getName().toLowerCase().contains( name.toLowerCase() )){
				matches.add(new IdServicePair(i,services.get(i)));
			}
		}
		return matches;
	}
	
	public Service getServiceById( int id ){
		if( id >= 0 && id < services.size()){
			return services.get(id);
		}
		return null;
	}
	
	public List<Service> getServices() {
		return services;
	}
	
	public boolean removeServiceById( int id ){
		
		if( id >= 0 && id < services.size()){
			services.remove(id);
			return true;
		}
		return false;
		
	}
	
	public abstract boolean changeLibraryPassword();
	
	
	// ============================================
	//		 Functions for initialising the object
	// ============================================
	/**
	 * This function converts the password library object into a byte array that represents the object.
	 * This can then be encrypted and written to a file or sent to a server.
	 * @return The byte representation of a library
	 */
	public byte[] getByteRepresentation(){
		List<Byte> data = new ArrayList<Byte>();
		
		// == GET DATA TO WRITE ==
		// Validation string
		byte[] valid = Constants.VALIDATION_STRING.getBytes();
		for( int i = 0 ; i < valid.length; i++ )
			data.add(valid[i]);
		
		// library version
		data.add(Constants.PROGRAM_VERSION_ARRAY[0]);
		data.add(Constants.PROGRAM_VERSION_ARRAY[1]);
		data.add(Constants.PROGRAM_VERSION_ARRAY[2]);
		
		// Number of services
		int numberServices = services.size();
		byte[] number = FileAccess.int_to_bb_le(numberServices);
		for( int i = 0 ; i < 4; i++ ){
			data.add(number[i]);
		}
		
		// services
		for( int i = 0 ; i < numberServices; i++ ){
			byte[] s = services.get(i).getServiceBytes();
			
			number = FileAccess.int_to_bb_le(s.length);
			for( int j = 0 ; j < 4; j++ ){
				data.add(number[j]);
			}
			
			for( int j = 0 ; j < s.length; j++ ){
				data.add(s[j]);
			}
			
		}
		
		// Convert data list to byte array
		byte[] bytes = new byte[data.size()];
		for( int i = 0 ; i < bytes.length; i++ ){
			bytes[i] = data.get(i);
		}
		
		return bytes;
	}
	
	/**
	 * Convert a byte representation of an object to the java object. 
	 * The byte representation can be retrieved from a local file or remote file.
	 * @param data The byte representation of the object
	 * @return True if the creation is successful
	 */
	public boolean byteRepresentationToObject( byte[] data ){
		// == REMOVE RANDOM AND VALIDATION DATA ==
		int preLength = Constants.VALIDATION_STRING.length();
		int storeLength = data.length - preLength;
		byte[] store = new byte[ storeLength ];
		
		for( int i = 0 ; i < store.length;i++){
			store[i] = data[ i + preLength ];
		}
		
		// == POPULATE OBJECT ==
		int p = 0;
		
		// Library version
		byte[] libraryVersion = new byte[3];
		libraryVersion[0] = store[p++];
		libraryVersion[1] = store[p++];
		libraryVersion[2] = store[p++];
		
		this.libraryVersion = libraryVersion[0] + "." + libraryVersion[1] + "." + libraryVersion[2];
		
		services = new ArrayList<Service>();
		// Get Number of services
		byte[] n_services = new byte[4];
		for( int i = 0 ; i < n_services.length; i++ ) n_services[i] = store[p++];
		
		int numberServices = FileAccess.bb_to_int_le(n_services);
		System.out.println("Loading " + numberServices + " Services...");
		for( int i = 0 ; i < numberServices; i++ ){
			
			Service service = new Service();
			
			// Get service length
			byte[] inte = new byte[4];
			for( int j = 0 ; j < inte.length; j++ ) inte[j] = store[p++];
			//int serviceLength = FileAccess.bb_to_int_le(inte);
			
			// Get serviceName
			inte = new byte[4];
			for( int j = 0 ; j < inte.length; j++ ) inte[j] = store[p++];
			int serviceNameLength = FileAccess.bb_to_int_le(inte);
			
			String serviceName = "";
			for( int j = 0 ; j < serviceNameLength ; j++ )
				serviceName += (char)store[p++];
			service.setName(serviceName);
			
			// Get service username
			inte = new byte[4];
			for( int j = 0 ; j < inte.length; j++ ) inte[j] = store[p++];
			int serviceUsernameLength = FileAccess.bb_to_int_le(inte);
			
			String serviceUsername = "";
			for( int j = 0 ; j < serviceUsernameLength ; j++ )
				serviceUsername += (char)store[p++];
			service.setUsername(serviceUsername);
			
			// Get service password
			inte = new byte[4];
			for( int j = 0 ; j < inte.length; j++ ) inte[j] = store[p++];
			int servicePasswordLength = FileAccess.bb_to_int_le(inte);
			
			String servicePassword = "";
			for( int j = 0 ; j < servicePasswordLength ; j++ )
				servicePassword += (char)store[p++];
			service.setPassword(servicePassword);
			
			
			// Get service extras
			inte = new byte[4];
			for( int j = 0 ; j < inte.length; j++ ) inte[j] = store[p++];
			int nServiceExtras = FileAccess.bb_to_int_le(inte);
			
			// Go though service extras
			for( int u = 0 ; u < nServiceExtras; u++ ){
				p += 4;
				
				ServiceExtra extra = new ServiceExtra();
				
				// Get extra key
				inte = new byte[4];
				for( int j = 0 ; j < inte.length; j++ ) inte[j] = store[p++];
				int extraKeyLength = FileAccess.bb_to_int_le(inte);
				
				String extraKey = "";
				for( int j = 0 ; j < extraKeyLength ; j++ )
					extraKey += (char)store[p++];
				extra.setKey(extraKey);
				
				// Get extra value
				inte = new byte[4];
				for( int j = 0 ; j < inte.length; j++ ) inte[j] = store[p++];
				int extraValueLength = FileAccess.bb_to_int_le(inte);
				
				String extraValue = "";
				for( int j = 0 ; j < extraValueLength ; j++ )
					extraValue += (char)store[p++];
				extra.setValue(extraValue);
				
				service.addServiceExtra(extra);
			}
					
			
			this.addService(service);
		}
		
		return true;
	}
	
	
	/**
	 * Import a legacy library. This is now obsolete.
	 * 
	 * @return boolean If the import succeeded
	 */
	public boolean importLegacyLibrary(){
		
		Scanner scanner = new Scanner(System.in);
		OutputConsole console = new OutputConsole( scanner );
		
		String path = console.getInput("Path to Legacy Library > ");
		String password = console.getSecurePassword("Legacy Library Password");
		
		// Legacy IV
		String iv_string = "os834jay4mxf781b";
		byte[] iv = iv_string.getBytes();
		
		byte[] key = LegacyLibrary.hashPassword(password).getBytes();
		
		try {
			List<Service> list = LegacyLibrary.readFile(path, key, iv);
			
			if( list == null ){
				return false;
			}
			
			services = list;
			
		} catch (IOException e) {
			return false;
		}
		
		
		return true;
	}
	
	public String getLibraryVersion(){
		return libraryVersion;
	}
}

