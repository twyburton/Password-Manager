package twy.burton.security;

import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.SecureRandom;
import java.util.Arrays;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import twy.burton.utilities.ArrayUtils;

public class AES {
	
	// Encryption and Decryption functions modified from https://gist.github.com/bricef/2436364
	/**
	 * Encrypt a byte array
	 * @param plainText The plaintext byte array
	 * @param encryptionKey The AES encryption key as a byte array
	 * @param iv The initial vector
	 * @return The encrypted data in a byte array
	 * @throws NoSuchAlgorithmException
	 * @throws NoSuchProviderException
	 * @throws NoSuchPaddingException
	 * @throws InvalidKeyException
	 * @throws InvalidAlgorithmParameterException
	 * @throws IllegalBlockSizeException
	 * @throws BadPaddingException
	 */
	public static byte[] encrypt(byte[] plainText, byte[] encryptionKey) throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException {
		SecureRandom random = new SecureRandom();
		byte[] iv = new byte[Constants.ENCRYPTION_INITIAL_VECTOR_LENGTH];
		random.nextBytes(iv);
		
		Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
		SecretKeySpec key = new SecretKeySpec(encryptionKey, "AES");
		cipher.init(Cipher.ENCRYPT_MODE, key,new IvParameterSpec( iv ));
		byte[] cipherText = cipher.doFinal( plainText );
		
		return ArrayUtils.concat(iv, cipherText);
	}
	
	/**
	 * Decrypt a byte array
	 * @param cipherText The cipher text byte array
	 * @param encryptionKey The AES encryption key as a byte array
	 * @param iv The initial vector
	 * @return The plain text data in a byte array
	 * @throws NoSuchAlgorithmException
	 * @throws NoSuchProviderException
	 * @throws NoSuchPaddingException
	 * @throws InvalidKeyException
	 * @throws InvalidAlgorithmParameterException
	 * @throws IllegalBlockSizeException
	 * @throws BadPaddingException
	 */
	public static byte[] decrypt(byte[] cipherText, byte[] encryptionKey, byte[] iv) throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException {
		
		
		
		Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
		SecretKeySpec key = new SecretKeySpec(encryptionKey, "AES");
		cipher.init(Cipher.DECRYPT_MODE, key,new IvParameterSpec( iv ));	
		return cipher.doFinal(cipherText);
	}
}
