package twy.burton.client.core.service;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import twy.burton.client.core.Constants;
import twy.burton.utilities.FileAccess;

public class Service {

	private String name;
	private String username;
	private String password;
	
	private List<ServiceExtra> extras;
	private List<ServiceFile> files;
	
	public Service(){
		extras = new ArrayList<ServiceExtra>();
	}
	
	
	// ==== Basic Service Functions ====
	/**
	 * Get the name of the service
	 * @return The name of the service
	 */
	public String getName() {
		return name;
	}

	/**
	 * Set the name of the service
	 * @param name The name of the service
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Get the username for the service
	 * @return The username of the service
	 */
	public String getUsername() {
		return username;
	}

	/**
	 * Set the username of the service
	 * @param username The username of the service
	 */
	public void setUsername(String username) {
		this.username = username;
	}

	/**
	 * Get the password of the service
	 * @return The password of the service
	 */
	public String getPassword() {
		return password;
	}
	
	/**
	 * Set the password of the service
	 * @param password The password of the service
	 */
	public void setPassword(String password) {
		this.password = password;
	}
	
	
	// ==== Service Extras Functions ====
	/**
	 * Add a service extra to the service
	 * @param serviceExtra The service extra to add
	 */
	public void addServiceExtra( ServiceExtra serviceExtra ){
		extras.add( serviceExtra );
	}
	
	/**
	 * Add a service extra to the service by defining the key and value pair
	 * @param key The key
	 * @param value The value
	 */
	public void addServiceExtra( String key , String value ){
		ServiceExtra ext = new ServiceExtra();
		ext.setKey(key);
		ext.setValue(value);
		extras.add(ext);
	}
	
	/**
	 * Get the list of service extras
	 * @return The list of service extras
	 */
	public List<ServiceExtra> getServiceExtras(){
		return extras;
	}
	
	/**
	 * Get the service extra at index i in the list
	 * @param i The service extra index
	 * @return The service extra object
	 */
	public ServiceExtra getServiceExtra( int i ){
		return extras.get(i);
	}
	
	/**
	 * Get the number of service extras
	 * @return The number of service extras
	 */
	public int getServiceExtrasSize(){
		return extras.size();
	}
	
	/**
	 * Delete a service extra
	 * @param key The key of the service extra you want to delete
	 * @return true if a service extra was deleted
	 */
	public boolean deleteServiceExtra( String key ){
		for( int i = 0 ; i < extras.size(); i++ ){
			if (extras.get(i).getKey().equals(key)){
				extras.remove(i);
				return true;
			}
		}
		return false;
	}
	
	/**
	 * 
	 */
	public int getNextTagId(){
		
		
		for( int i = 1; i < Constants.MAX_TAGS_PER_SERVICE; i++ ){
			
		}
	}
	
	private boolean doesServiceExtraExist( String key ){
		for( int i = 0 ; i < extras.size(); i++ ){
			if( extras.get(i).getKey().equals(key) ){
				return true;
			}
		}
		return false;
	}
	
	/**
	 * Get the byte representation of the service so that it can be written to a binary file
	 * @return The byte representation of the service
	 */
	public byte[] getServiceBytes(){
		
		/*
		 *  FORMAT:
		 *  	Service Name Size[4],
		 *  	Service Name [n],
		 *  	Username Size[4],
		 *  	Username [n],
		 *  	Password Size[4],
		 *  	Password [n],
		 *  	Number of ServiceExtras [4],
		 *  		ServiceExtra size [4],
		 *  		ServiceExtra [n],
		 *  	Number of ServiceFiles [4],
		 *  		ServiceFile Size [4],
		 *  		ServiceFile [n]
		 */
		
		// -- Get service extra stuff --
		int extraLength = 0;
		for( int i = 0 ; i < extras.size(); i++ ){
			extraLength += 4;
			extraLength += extras.get(i).getServiceExtraBytes().length;
		}
			// Files
		for( int i = 0 ; i < files.size(); i++ ){
			extraLength += 4;
			extraLength += files.get(i).getServiceFileBytes().length;
		}
		
		// Get all
		byte[] nameBytes = name.getBytes();
		byte[] usernameBytes = username.getBytes();
		byte[] passwordBytes = password.getBytes(); 
		
		// Get total length
		int length = 4 + 4 + 4 + 4 + nameBytes.length + usernameBytes.length + passwordBytes.length + extraLength;
		
		byte[] data = new byte[length];
		int x = 0;
		
		// Add basic
		// Service Name
		byte[] number = FileAccess.int_to_bb_le(nameBytes.length);
		for( int i = 0 ; i < 4; i++ )
			data[x++] = number[i];
		
		for( int i = 0 ; i < nameBytes.length; i++ )
			data[x++] = nameBytes[i];
		
		// Service username
		number = FileAccess.int_to_bb_le(usernameBytes.length);
		for( int i = 0 ; i < 4; i++ )
			data[x++] = number[i];
		
		for( int i = 0 ; i < usernameBytes.length; i++ )
			data[x++] = usernameBytes[i];
		
		// Service Password
		number = FileAccess.int_to_bb_le(passwordBytes.length);
		for( int i = 0 ; i < 4; i++ )
			data[x++] = number[i];
		
		for( int i = 0 ; i < passwordBytes.length; i++ )
			data[x++] = passwordBytes[i];
		
		// Service Extras
		number = FileAccess.int_to_bb_le(extras.size());
		for( int i = 0 ; i < 4; i++ )
			data[x++] = number[i];
		
		for( int i = 0 ; i < extras.size(); i++ ){
			
			byte[] extra = extras.get(i).getServiceExtraBytes();
			number = FileAccess.int_to_bb_le(extra.length);
			for( int j = 0 ; j < 4; j++ )
				data[x++] = number[j];
			
			for( int j = 0; j < extra.length; j++ ){
				data[x++] = extra[j];
			}
			
		
		}
		
		// Service Files
		number = FileAccess.int_to_bb_le(extras.size());
		for( int i = 0 ; i < 4; i++ )
			data[x++] = number[i];
		
		for( int i = 0 ; i < files.size(); i++ ){
			byte[] file = files.get(i).getServiceFileBytes();
			number = FileAccess.int_to_bb_le(file.length);
			for( int j = 0 ; j < 4; j++ )
				data[x++] = number[j];
			
			for( int j = 0; j < file.length; j++ ){
				data[x++] = file[j];
			}
		}
		
		return data;
	}
	
}
