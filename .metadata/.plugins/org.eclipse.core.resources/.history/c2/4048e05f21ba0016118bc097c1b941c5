package twy.burton.core.library;

import java.io.IOException;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import twy.burton.core.Constants;
import twy.burton.core.library.legacy.LegacyLibrary;
import twy.burton.core.service.IdServicePair;
import twy.burton.core.service.Service;
import twy.burton.utilities.FileAccess;
import twy.burton.utilities.OutputConsole;

public abstract class PasswordLibrary {

	protected String libraryName;
	protected List<Service> services = new ArrayList<Service>();
	protected String libraryVersion = "Unknown";
	
	public PasswordLibrary(){
		
	}
	
	// Rewrite Library To Store
	public abstract boolean write();
	// Read Library From Store
	protected abstract boolean read();
	// Unlock The Library
	public abstract boolean unlock();
	// Lock The Library
	public void lock(){
		services = new ArrayList<Service>();
	}
	
	public abstract boolean validatePassword( String password );
	
	// Functions for reading and writing library data to the libariesfile
	public abstract byte[] getLibraryStoreString();
	public abstract void createLibraryFromStoreString( byte[] storeString );
	
	
	public abstract String getListIdentifier();
	
	public void setLibraryName( String libraryName ){
		this.libraryName = libraryName;
	}
	
	public String getLibraryName(){
		return libraryName;
	}
	
	
	// ============================================
	//		 Functions for accessing services
	// ============================================
	
	// Add a service to the service list
	public void addService( Service s0 ){
		services.add(s0);
	}
	
	// Return a list of services which have a name containing the name parameter
	public List<IdServicePair> getServiceByName( String name ){
		List<IdServicePair> matches = new ArrayList<IdServicePair>();
		for( int i = 0 ; i < services.size(); i++ ){
			if( services.get(i).getName().toLowerCase().contains( name.toLowerCase() )){
				matches.add(new IdServicePair(i,services.get(i)));
			}
		}
		return matches;
	}
	
	public Service getServiceById( int id ){
		if( id >= 0 && id < services.size()){
			return services.get(id);
		}
		return null;
	}
	
	public List<Service> getServices() {
		return services;
	}
	
	public boolean removeServiceById( int id ){
		
		if( id >= 0 && id < services.size()){
			services.remove(id);
			return true;
		}
		return false;
		
	}
	
	public abstract boolean changeLibraryPassword();
	
	/**
	 * 
	 * @return The byte representation of a library
	 */
	public byte[] getByteRepresentation(){
		// == PREPARE THE FILE TO WRITE ==
			List<Byte> data = new ArrayList<Byte>();
			
			// == GET DATA TO WRITE ==
			// Add random data and validation string
			SecureRandom ran = new SecureRandom();
			byte[] randomPadding = new byte[Constants.LENGTH_OF_RANDOM_BEFORE_ENCRYPTION]; 
			ran.nextBytes(randomPadding);
			for( int i = 0 ; i < Constants.LENGTH_OF_RANDOM_BEFORE_ENCRYPTION; i++ )
				data.add( randomPadding[i] );
			
			byte[] valid = Constants.VALIDATION_STRING.getBytes();
			for( int i = 0 ; i < valid.length; i++ )
				data.add(valid[i]);
			
			// library version
			data.add(Constants.PROGRAM_VERSION_ARRAY[0]);
			data.add(Constants.PROGRAM_VERSION_ARRAY[1]);
			data.add(Constants.PROGRAM_VERSION_ARRAY[2]);
			
			// Number of services
			int numberServices = services.size();
			byte[] number = FileAccess.int_to_bb_le(numberServices);
			for( int i = 0 ; i < 4; i++ ){
				data.add(number[i]);
			}
			
			// services
			for( int i = 0 ; i < numberServices; i++ ){
				byte[] s = services.get(i).getServiceBytes();
				
				number = FileAccess.int_to_bb_le(s.length);
				for( int j = 0 ; j < 4; j++ ){
					data.add(number[j]);
				}
				
				for( int j = 0 ; j < s.length; j++ ){
					data.add(s[j]);
				}
				
			}
			
			// == WRITE TO FILE ==
			// Convert data list to byte array
			byte[] bytes = new byte[data.size()];
			for( int i = 0 ; i < bytes.length; i++ ){
				bytes[i] = data.get(i);
			}
			
			return bytes;
	}
	
	
	/**
	 * Import a legacy library
	 * 
	 * @return boolean 
	 */
	public boolean importLegacyLibrary(){
		
		Scanner scanner = new Scanner(System.in);
		OutputConsole console = new OutputConsole( scanner );
		
		String path = console.getInput("Path to Legacy Library > ");
		String password = console.getSecurePassword("Legacy Library Password");
		
		// Legacy IV
		String iv_string = "os834jay4mxf781b";
		byte[] iv = iv_string.getBytes();
		
		byte[] key = LegacyLibrary.hashPassword(password).getBytes();
		
		try {
			List<Service> list = LegacyLibrary.readFile(path, key, iv);
			
			if( list == null ){
				return false;
			}
			
			services = list;
			
		} catch (IOException e) {
			return false;
		}
		
		
		return true;
	}
	
	public String getLibraryVersion(){
		return libraryVersion;
	}
}

