package twy.burton.userinterface;

import java.io.File;
import java.util.List;
import java.util.Scanner;
import java.util.UUID;

import twy.burton.core.Constants;
import twy.burton.core.PasswordManager;
import twy.burton.core.library.LocalPasswordLibrary;
import twy.burton.core.library.PasswordLibrary;
import twy.burton.core.service.Service;
import twy.burton.core.service.ServiceExtra;
import twy.burton.utilities.OutputConsole;

public class UserInterface {

	private Scanner scanner = new Scanner(System.in);
	private boolean running = true;
	private OutputConsole console = new OutputConsole( scanner );
	private PasswordManager pm = new PasswordManager();
	
	public UserInterface(){
		console.clear();
		console.println( Style.STYLE_UNDERLINE_ON + Constants.PROGRAM_NAME + " " + Constants.PROGRAM_VERSION + Style.STYLE_UNDERLINE_OFF );
	}
	
	// Perform first time setup. This includes creating directories and blank library files.
	public void firstSetup(){
		
		String[] required_folders = {Constants.MANAGER_DIRECTORY, Constants.LIBRARIES_DIRECTORY};
		for( int i = 0 ; i < required_folders.length; i++ ){
			File folder = new File(required_folders[i]);
			if( !folder.exists() ){
				folder.mkdirs();
			}
		}
		
		File libraries_file = new File(Constants.LIBRARIES_FILE);
		if( libraries_file.exists() ){
			pm.readLibrariesFile();
		} else {
			pm.writeLibrariesFile();
		}
		
	}
	
	public void run(){
		
		while( running ){
			
			// === GET USER INPUT ===
			
			String prompt = Style.CYAN + "> " + Style.WHITE;
			
			if( pm.getActiveLibrary() != null )
				prompt = Style.CYAN + pm.getActiveLibrary().getLibraryName() + Style.GREEN + "$ " + Style.WHITE;
			
			String[] input = console.getSeperatedInput(prompt);
			
			// === ACT ON INPUT ===
			// Exit the system
			if( input[0].equals( "exit" ) || input[0].equals("quit") ){
				running = false;
			}
			
			// Help display
			else if ( input[0].equals( "help" ) || input[0].equals( "?" ) || input[0].equals( "man" ) ){
				console.println(Style.STYLE_UNDERLINE_ON + "Help" + Style.STYLE_UNDERLINE_OFF);
				
				console.println("exit - Exit password manager");
				console.println("help - Help page");
				
				console.println("");
				
				if( pm.getActiveLibrary() == null ){
					console.println("ls - List password libraries");
					console.println("unlock <Library ID> - Unlock the library identified by Library ID");
					console.println("createlocal - Create a local library");
				} else {
					
				}
			}
			
			// List libraries or services if library is active
			else if ( input[0].equals("ls") ){
				if( pm.getActiveLibrary() == null ){
					
					List<PasswordLibrary> libs = pm.getLibraries();
					console.print(Style.STYLE_UNDERLINE_ON + "Libraries" + Style.STYLE_UNDERLINE_OFF);
					
					for( int i = 0 ; i < libs.size(); i++ ){
						console.print( "\n" + i + " " + libs.get(i).getLibraryName() );
					}
					
					console.print("\n");
					
					
				} else {
					PasswordLibrary lib = pm.getActiveLibrary();
					console.print(Style.STYLE_UNDERLINE_ON + "Services" + Style.STYLE_UNDERLINE_OFF);
					
					for( int i = 0 ; i < lib.getServices().size(); i++ ){
						console.print( "\n" + i + " " + lib.getServices().get(i).getName() );
					}
					
					console.print("\n");
				}
			}
			
			// Create a local library
			else if ( input[0].equals( "unlock" ) ) {
				if( input.length == 2 ){
					int libraryNumber = Integer.parseInt(input[1]);
					
					boolean status = pm.setActiveLibrary( libraryNumber );
					
				} else {
					console.println("Usage: unlock <Library ID>");
				}
			}
			
			// Create a local library
			else if ( input[0].equals( "createlocal" ) ) {
				
				String libraryName = console.getInput("Library Name> ");
				String libraryFileName = UUID.randomUUID().toString() + ".pm";
				
				LocalPasswordLibrary lpl = new LocalPasswordLibrary();
				lpl.setLibraryName(libraryName);
				lpl.setFileName(libraryFileName);
				
				lpl.write();
				pm.addLibrary(lpl);
				pm.writeLibrariesFile();
				
			}
			
			// Create a remote library
			else if ( input[0].equals( "createremote" ) ) {
		
			}
			
			
			// === FUNCTIONS WHEN LIBRARY IS ACTIVE ===
			else if ( pm.getActiveLibrary() != null ){
				// -- get --
				if( input[0].equals("get") ){
					if( input.length == 2 ){
						List<Service> matches = pm.getActiveLibrary().getServiceByName( input[1] );
						
						if( matches.size() > 0 ){
							for( int i = 0 ; i < matches.size() ; i++ ){
								Service ser = matches.get(i);
								console.println( ser.getName() + "\t" + ser.getUsername() + "\t" + ser.getPassword() );
							}
						} else {
							console.println("No Matches");
						}
						
					} else {
						console.println("Usage: get <service name>");
					}
				}
			}

			
		}
		
		scanner.close();
		console.clear();
		
	}
	
}
